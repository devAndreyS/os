.file   "main.c"                                // Указывает на исходный файл, из которого был сгенерирован ассемблерный код.
.text                                           // Начало секции кода.
.section    .rodata.str1.1,"aMS",@progbits,1    // Объявление секции для строковых литералов.
.LC0:                                          
    .string "Factorial of %d = %lld\n"          // Строка формата для вывода результата.
.section    .text.startup,"ax",@progbits        // Объявление секции с кодом для инициализации.
.globl  main                                    // Объявление глобальной метки для функции main.
.type   main, @function                         // Указание типа метки main как функции.
main:                                           // Начало функции main.
.LFB13:                                       
    .cfi_startproc                              // Начало процедуры для отладки.
    endbr64                                     // Инструкция для обеспечения безопасности (используется для Intel CET).
    pushq   %rax                                // Сохранение регистра %rax на стеке.
    .cfi_def_cfa_offset 16                      // Обновление смещения CFA (Current Frame Address) для отладки.
    movl    $11, %edi                           // Помещение значения 11 в регистр %edi (аргумент для функции factorial).
    call    factorial@PLT                       // Вызов функции factorial (через таблицу PLT).
    movl    $11, %edx                           // Помещение значения 11 в регистр %edx (аргумент для printf).
    movl    $1, %edi                            // Помещение значения 1 в регистр %edi (аргумент для printf).
    leaq    .LC0(%rip), %rsi                    // Загрузка адреса строки формата в регистр %rsi.
    movq    %rax, %rcx                          // Перемещение результата функции factorial в регистр %rcx.
    xorl    %eax, %eax                          // Обнуление регистра %eax.
    call    __printf_chk@PLT                    // Вызов функции __printf_chk для безопасного вывода.
    xorl    %eax, %eax                          // Обнуление регистра %eax (подготовка к завершению функции).
    popq    %rdx                                // Восстановление регистра %rdx из стека.
    .cfi_def_cfa_offset 8                       // Обновление смещения CFA для отладки.
    ret                                         // Возврат из функции main.
    .cfi_endproc                                // Конец процедуры для отладки.
.LFE13:                                        
    .size   main, .-main                        // Определение размера функции main.
    .ident  "GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0" // Идентификационная строка компилятора.
    .section    .note.GNU-stack,"",@progbits    // Объявление секции для информации о стеке.
    .section    .note.gnu.property,"a"          // Объявление секции для свойств GNU.
    .align 8                                    // Выравнивание на 8 байт.
    .long   1f - 0f                             // Длина имени владельца.
    .long   4f - 1f                             // Общая длина записи.
    .long   5                                   // Тип данных.
0:                                              
    .string "GNU"                               
1:                                              
    .align 8                                    // Выравнивание на 8 байт.
    .long   0xc0000002                          // Указание свойства.
    .long   3f - 2f                             // Длина данных.
2:                                              
    .long   0x3                                 // Значение данных.
3:                                             
    .align 8                                    // Выравнивание на 8 байт.
4:                                    